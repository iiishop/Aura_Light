/**
 * Weather Manager
 * Ëé∑ÂèñÂπ∂ÊòæÁ§∫ wttr.in Â§©Ê∞îÊï∞ÊçÆ
 */

class WeatherManager {
    constructor() {
        this.city = 'London'; // ÈªòËÆ§ÂüéÂ∏Ç
        this.updateInterval = 600000; // 10ÂàÜÈíüÊõ¥Êñ∞‰∏ÄÊ¨°
        this.timer = null;
        
        // Â§©Ê∞î‰ª£Á†ÅÂà∞emojiÁöÑÊò†Â∞Ñ
        this.weatherIcons = {
            '113': '‚òÄÔ∏è',  // Sunny
            '116': '‚õÖ',  // Partly cloudy
            '119': '‚òÅÔ∏è',  // Cloudy
            '122': '‚òÅÔ∏è',  // Overcast
            '143': 'üå´Ô∏è',  // Mist
            '176': 'üå¶Ô∏è',  // Patchy rain possible
            '179': 'üå®Ô∏è',  // Patchy snow possible
            '182': 'üå®Ô∏è',  // Patchy sleet possible
            '185': 'üå®Ô∏è',  // Patchy freezing drizzle possible
            '200': '‚õàÔ∏è',  // Thundery outbreaks possible
            '227': 'üå®Ô∏è',  // Blowing snow
            '230': '‚ùÑÔ∏è',  // Blizzard
            '248': 'üå´Ô∏è',  // Fog
            '260': 'üå´Ô∏è',  // Freezing fog
            '263': 'üå¶Ô∏è',  // Patchy light drizzle
            '266': 'üåßÔ∏è',  // Light drizzle
            '281': 'üå®Ô∏è',  // Freezing drizzle
            '284': 'üå®Ô∏è',  // Heavy freezing drizzle
            '293': 'üå¶Ô∏è',  // Patchy light rain
            '296': 'üåßÔ∏è',  // Light rain
            '299': 'üåßÔ∏è',  // Moderate rain at times
            '302': 'üåßÔ∏è',  // Moderate rain
            '305': 'üåßÔ∏è',  // Heavy rain at times
            '308': 'üåßÔ∏è',  // Heavy rain
            '311': 'üå®Ô∏è',  // Light freezing rain
            '314': 'üå®Ô∏è',  // Moderate or heavy freezing rain
            '317': 'üå®Ô∏è',  // Light sleet
            '320': 'üå®Ô∏è',  // Moderate or heavy sleet
            '323': 'üå®Ô∏è',  // Patchy light snow
            '326': 'üå®Ô∏è',  // Light snow
            '329': 'üå®Ô∏è',  // Patchy moderate snow
            '332': '‚ùÑÔ∏è',  // Moderate snow
            '335': '‚ùÑÔ∏è',  // Patchy heavy snow
            '338': '‚ùÑÔ∏è',  // Heavy snow
            '350': 'üå®Ô∏è',  // Ice pellets
            '353': 'üå¶Ô∏è',  // Light rain shower
            '356': 'üåßÔ∏è',  // Moderate or heavy rain shower
            '359': 'üåßÔ∏è',  // Torrential rain shower
            '362': 'üå®Ô∏è',  // Light sleet showers
            '365': 'üå®Ô∏è',  // Moderate or heavy sleet showers
            '368': 'üå®Ô∏è',  // Light snow showers
            '371': '‚ùÑÔ∏è',  // Moderate or heavy snow showers
            '374': 'üå®Ô∏è',  // Light showers of ice pellets
            '377': 'üå®Ô∏è',  // Moderate or heavy showers of ice pellets
            '386': '‚õàÔ∏è',  // Patchy light rain with thunder
            '389': '‚õàÔ∏è',  // Moderate or heavy rain with thunder
            '392': '‚õàÔ∏è',  // Patchy light snow with thunder
            '395': '‚õàÔ∏è'   // Moderate or heavy snow with thunder
        };
    }

    /**
     * ËÆæÁΩÆÂüéÂ∏Ç
     */
    setCity(city) {
        this.city = city || 'London';
        console.log('[Weather] City set to:', this.city);
    }

    /**
     * ÂºÄÂßãËá™Âä®Êõ¥Êñ∞
     */
    startAutoUpdate() {
        console.log('[Weather] Starting auto-update...');
        this.fetchWeather();
        
        if (this.timer) {
            clearInterval(this.timer);
        }
        
        this.timer = setInterval(() => {
            this.fetchWeather();
        }, this.updateInterval);
    }

    /**
     * ÂÅúÊ≠¢Ëá™Âä®Êõ¥Êñ∞
     */
    stopAutoUpdate() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
    }

    /**
     * Ëé∑ÂèñÂ§©Ê∞îÊï∞ÊçÆ
     */
    async fetchWeather() {
        try {
            console.log(`[Weather] Fetching weather for ${this.city}...`);
            
            // ‰ΩøÁî® wttr.in API
            const url = `https://wttr.in/${encodeURIComponent(this.city)}?format=j1`;
            
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            console.log('[Weather] Data received:', data);
            
            if (data.current_condition && data.current_condition.length > 0) {
                this.displayWeather(data.current_condition[0]);
            } else {
                this.showError('No weather data available');
            }
            
        } catch (error) {
            console.error('[Weather] Fetch error:', error);
            this.showError('Failed to load weather data');
        }
    }

    /**
     * ÊòæÁ§∫Â§©Ê∞îÊï∞ÊçÆ
     */
    displayWeather(condition) {
        console.log('[Weather] Displaying weather:', condition);
        
        // Ê∏©Â∫¶
        const tempValue = document.getElementById('tempValue');
        if (tempValue) {
            tempValue.textContent = condition.temp_C;
        }
        
        // Â§©Ê∞îÊèèËø∞
        const weatherDesc = document.getElementById('weatherDesc');
        if (weatherDesc) {
            // ‰ºòÂÖà‰ΩøÁî®‰∏≠ÊñáÊèèËø∞
            if (condition.lang_zh && condition.lang_zh.length > 0) {
                weatherDesc.textContent = condition.lang_zh[0].value;
            } else if (condition.weatherDesc && condition.weatherDesc.length > 0) {
                weatherDesc.textContent = condition.weatherDesc[0].value;
            }
        }
        
        // ÂüéÂ∏Ç
        const weatherLocation = document.getElementById('weatherLocation');
        if (weatherLocation) {
            weatherLocation.textContent = this.city;
        }
        
        // Â§©Ê∞îÂõæÊ†á
        const weatherIcon = document.getElementById('weatherIcon');
        if (weatherIcon) {
            const iconCode = condition.weatherCode;
            const emoji = this.weatherIcons[iconCode] || 'üå°Ô∏è';
            weatherIcon.textContent = emoji;
            weatherIcon.className = 'weather-icon';
            
            // Ê∑ªÂä†Â§©Ê∞îÁ±ªÂûãclass
            if (['113'].includes(iconCode)) {
                weatherIcon.classList.add('sunny');
            } else if (['116', '119', '122'].includes(iconCode)) {
                weatherIcon.classList.add('cloudy');
            } else if (iconCode.startsWith('2') || iconCode.startsWith('3')) {
                weatherIcon.classList.add('rainy');
            }
        }
        
        // ÊπøÂ∫¶
        const humidity = document.getElementById('humidity');
        if (humidity) {
            humidity.textContent = `${condition.humidity}%`;
        }
        
        // È£éÈÄü
        const windSpeed = document.getElementById('windSpeed');
        if (windSpeed) {
            windSpeed.textContent = `${condition.windspeedKmph} km/h ${condition.winddir16Point}`;
        }
        
        // ËÉΩËßÅÂ∫¶
        const visibility = document.getElementById('visibility');
        if (visibility) {
            visibility.textContent = `${condition.visibility} km`;
        }
        
        // ‰ΩìÊÑüÊ∏©Â∫¶
        const feelsLike = document.getElementById('feelsLike');
        if (feelsLike) {
            feelsLike.textContent = `${condition.FeelsLikeC}¬∞C`;
        }
    }

    /**
     * ÊòæÁ§∫ÈîôËØØ
     */
    showError(message) {
        console.error('[Weather] Error:', message);
        
        const weatherIcon = document.getElementById('weatherIcon');
        if (weatherIcon) {
            weatherIcon.innerHTML = '<div class="weather-loading">‚ö†Ô∏è Error</div>';
        }
        
        const weatherDesc = document.getElementById('weatherDesc');
        if (weatherDesc) {
            weatherDesc.textContent = message;
        }
    }
}

// ÂØºÂá∫
export default WeatherManager;
